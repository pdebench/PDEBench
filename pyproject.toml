[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
requires-python = ">=3.9,<3.11"
dynamic = ["readme"]
name = "pdebench"
version = "0.1.0"
description = "PDEBench: An Extensive Benchmark for Scientific Machine Learning"
authors = [
    {name = "Makoto Takamoto", email = "Makoto.Takamoto@neclab.eu"},
    {name = "Timothy Praditia", email = "timothy.praditia@iws.uni-stuttgart.de"},
    {name = "Raphael Leiteritz", email = "raphael.leiteritz@ipvs.uni-stuttgart.de"},
    {name = "Dan MacKinlay"},
    {name = "Francesco Alesiani"},
    {name = "Dirk PflÃ¼ger"},
    {name = "Mathias Niepert"},
]
license = {file = "LICENSE.txt"}
dependencies = [
    "scipy",
    "numpy<2",
    "matplotlib",
    "h5py",
    "pandas",
    "python-dotenv",
    "hydra-core",
    "torch~=1.13.0",
    "torchvision~=0.14.1",
    "deepxde~=1.1.3",
    "pyro-ppl",
    "tqdm",
]

[project.optional-dependencies]
datagen310 = [
    "six",
    "clawpack@git+https://github.com/clawpack/clawpack.git@d619d6835ce128a0421aa52d70d2a6c9d9d1ce93",
    "dash",
    "phiflow",
    "imageio",
    "einops",
    "torch @ https://download.pytorch.org/whl/cu117/torch-1.13.1%2Bcu117-cp310-cp310-linux_x86_64.whl",
    "torchvision @ https://download.pytorch.org/whl/cu117/torchvision-0.14.1%2Bcu117-cp310-cp310-linux_x86_64.whl",
    "jax==0.4.11",
    "jaxlib @ https://storage.googleapis.com/jax-releases/cuda11/jaxlib-0.4.11+cuda11.cudnn86-cp310-cp310-manylinux2014_x86_64.whl",
]
datagen39 = [
    "six",
    "clawpack@git+https://github.com/clawpack/clawpack.git@d619d6835ce128a0421aa52d70d2a6c9d9d1ce93",
    "dash",
    "phiflow",
    "imageio",
    "einops",
    "torch @ https://download.pytorch.org/whl/cu117/torch-1.13.1%2Bcu117-cp39-cp39-linux_x86_64.whl",
    "torchvision @ https://download.pytorch.org/whl/cu117/torchvision-0.14.1%2Bcu117-cp39-cp39-linux_x86_64.whl",
    "jax==0.4.11",
    "jaxlib @ https://storage.googleapis.com/jax-releases/cuda11/jaxlib-0.4.11+cuda11.cudnn86-cp39-cp39-manylinux2014_x86_64.whl"
]

test = [
  "pytest >=6",
  "pytest-cov >=3",
  "jax", # cpu only
  "nox"
]

docs = [
  "sphinx>=7.0",
  "myst_parser>=0.13",
  "sphinx_copybutton",
  "sphinx_autodoc_typehints",
  "furo>=2023.08.17"
]

dev = ["anybadge",
       "ruff",
       "pytest",
       "pytest-coverage",
       "pytest-mypy",
       "hatchling",
       "nox",
       "pre-commit"]

[project.urls]
Homepage = "https://github.com/pdebench/PDEBenchm"
Documentation = "https://github.com/pdebench/PDEBench"
Repository = "https://github.com/pdebench/PDEBench"

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "pdebench/_version.py"
build.include = [
  "pdebench"
]
metadata.allow-direct-references = true

[tool.hatch.envs.default]
features = ["test"]
scripts.test = "pytest {args}"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.coverage]
run.source = ["pdebench"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["pdebench", "tests"]
python_version = "3.8"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pdebench.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.ruff]
src = ["pdebench"]

[tool.ruff.format]
exclude = ["*.pyi"]

[tool.ruff.lint]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  "UP007"
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["pdebench._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "wrong-import-position",
]

[tool.setuptools.dynamic]
readme = {file = ["README.md"], content-type = "text/markdown"}
